@startuml
title Diagramme de classe
' skinparam linetype ortho

package Modele{

    class Partenaire{
        # nom : String
        # adresse: String
        + offrir(cadeau : AProduit, client : Client)
        + vendre(produit : Produit, client : Client)
        + catalogueProduits() : ArrayList<Produit>
    }

    class Zone{
        # nom : String
        # code_postal : String
    }

    class Abonne{
        vup : boolean
        + acheter (produit : Produit)
        + chargerCarte (carte : CarteInfidelite)
        + recupererCadeau (cadeau : Cadeau, carte : CarteInfidelite)
    }

    class Client{
        + acheter (produit : Produit)
    }

    class CarteInfidelite{
        montant : double
        nombrePoint : int
        chargement (montant : int )
        nouvelleAchat(montant :floar)
        listePatenaire(): ArrayList<Partenaire>
    }
    class Ville{
        # nom :String
        # superficie: double
    }

    abstract  AProduit{
        getCout():double
    }
    class Produit{
        istrategie : IStrategyCout
        getCout():double
    }

    class Cadeau{
        getCout():double
    }
    Produit -left-|> AProduit
    Cadeau -up-|> Produit


    package Strategie{
        class CoutNormale
        class DixPourcentPoint{
            getPoint():double
        }
        class DixPourcentCout{
            getCout():double
        }
        interface IStrategyCout{
            getCout() : double
        }
        interface IStrategyPoint
        CoutNormale .up.|> IStrategyCout
        DixPourcentPoint .up.|> IStrategyPoint
        DixPourcentCout .up.|> IStrategyCout
    }



    class ItemFacturer{

    }

    class FactureTableView {

    }

    FactureTableView -right-> "*"ItemFacturer

    class Vente{
        quantite: int
        date : Date
    }

    class Operation{
        type: String
        montant: double
        point: double
    }

    class Database{

    }

    Abonne -up-> "*"CarteInfidelite : possede
    Abonne -up-|> Client : est

    Ville *-right- "*" Zone
    Zone *-right- "*" Partenaire
    Partenaire -> "*" AProduit : vend ou offre
    Produit --> IStrategyCout
    Produit --> IStrategyPoint
    CarteInfidelite -up-> "*"Partenaire : "est validée"
    Partenaire --> "*" Vente : effectue
    Abonne --> "*" Operation : effectue
    Vente --> Produit: concerne

}

package Controller{
    class AbonneListController{

    }
    note bottom : "gère la vue qui présente \nla liste des abonnés et la liste\ndes opérations fait par l'abonné"


    class ClientsController{

    }
    note bottom: "gère la vue permettant de \nselectionner l'abonne a qui on \n un ou plusieurs produits"


    class EditSelectedProductQuantityController{

    }
    note top: "gère la vue permettant de \nspecifier le nombre de produit \nchoisi pour un produit lors d'un achat"


    class OffreListController{

    }
    note bottom : "gère la vue permettant de \nlister les cadeaux stockées en \nbase de données"


    class VenteController{

    }
    note top: "gère la vue principal de \nl'application. C'est elle le point d'entrée de l'application"

    package Observer{
        interface AbonneObserver{
            update(abonne Abonne)
        }

        interface AbonneSubject{
            register(observer AbonneObserver)
            unregister(observer AbonneObserver)
            notifyObservers()

        }

        interface ItemFactureObserver{
            update(itemFacturer ItemFacturer)
        }

        interface ItemFactureSubject {
            register(observer ItemFactureObserver);
            unregister(observer ItemFactureObserver o);
            notifyObservers();
        }



    }

    VenteController ..|>AbonneObserver
    EditSelectedProductQuantityController ..|>ItemFactureSubject
    AbonneListController ..|>AbonneSubject
    VenteController -- ClientsController
    VenteController -- OffreListController
    VenteController -- AbonneListController
    VenteController -- EditSelectedProductQuantityController
    VenteController -- FactureTableView
    FactureTableView ..|> ItemFactureObserver

}
@enduml

@startuml
title cas1
left to right direction

actor client as C
rectangle "cumul de points" {
    usecase "faire achat" as UC1
    usecase "valider carte" as UC2

    UC1 .> UC2 : <<include>>

}

C -- UC1
@enduml

@startuml
title cas2
left to right direction

actor client as C
rectangle "Bonus d'infidelite" {
    usecase "Utiliser carte" as UC1
    usecase "valider carte" as UC2

    UC1 .> UC2 : <<include>>
}

C -- UC1
@enduml

@startuml
title cas3
left to right direction

actor client as C
rectangle "Consulter solde" {
    usecase "consulter solde" as UC1
    usecase "valider carte" as UC2

    UC1 .> UC2 : <<include>>

}

C -- UC1
@enduml



@startuml
title cas4
left to right direction

actor client as C
rectangle "Catalogue des cadeaux" {
    usecase "consulter annuaire" as UC1
    usecase "Consulter description cadeau" as UC2
    usecase "Consulter description magasin" as UC3

    UC2 .> UC1 : <<extends>>
    UC3 .up.> UC1 : <<extends>>

}

C -- UC1
@enduml

@startuml
title cas5
left to right direction

actor client as C
rectangle "Achat cadeau" {
    usecase "demander offre" as UC1
    usecase "acheter offre" as UC2
    usecase "valider carte" as UC3

    UC2 .> UC1 : <<extends>>
    UC2 .down.> UC3 : <<include>>

}

C -- UC1
@enduml

@startuml
title cas6
left to right direction

actor Employe
rectangle "Obtenir statut vup et achat de ticket parcometre municipale gratuit" {
    usecase "achat de cadeau" as UC1
    usecase UC2 as "devenir vup.
    --
    montant hebdomanaire achat >= 100$"
    usecase "achat stationnement parcometre municipal" as UC3
    usecase "stationnement gratuit" as UC4
    usecase "stationnement payant" as UC5

    (UC1) ..> (UC3) : <<extends>>
    (UC2) .>(UC1): <<include>>
    (UC4) .>(UC2) :<<include>>
    (UC4) -left-|> (UC3)
    (UC5) -down-|> (UC3)

}

Employe --> UC1
@enduml

@startuml
left to right direction

actor Employe
actor client
rectangle "Lister les transactions  et calculer les statistiques" {
    usecase "calculer les statistiques" as UC1
    usecase "participation des clients" as UC2
    usecase "cadeaux populaire" as UC3
    usecase "heure d'achalandage" as UC4
    usecase "lister les transactions" as UC5
    usecase "débit" as UC6
    usecase "crédit" as UC7

    (UC1) ..> (UC3) : <<extends>>
    (UC1) ..>(UC4): <<extends>>
    (UC1) ..>(UC2) :<<extends>>
    (UC6) -right-|> (UC5)
    (UC7) --|> (UC5)

}

Employe --> UC1
client --> UC5
@enduml

