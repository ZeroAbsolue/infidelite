@startuml
title Diagramme de classe
' skinparam linetype ortho

package Modele{

    class Partenaire{
        # nom : String
        # adresse: String
        + offrir(cadeau : AProduit, client : Client)
        + vendre(produit : Produit, client : Client)
        + catalogueProduits() : ArrayList<Produit>
    }

    class Zone{
        # nom : String
        # code_postal : String
    }

    class Abonne{
        vup : boolean
        + acheter (produit : Produit)
        + chargerCarte (carte : CarteInfidelite)
        + recupererCadeau (cadeau : Cadeau, carte : CarteInfidelite)
    }

    class Client{
        + acheter (produit : Produit)
    }

    class CarteInfidelite{
        montant : double
        nombrePoint : int
        chargement (montant : int )
        nouvelleAchat(montant :floar)
        listePatenaire(): ArrayList<Partenaire>
    }
    class Ville{
        # nom :String
        # superficie: double
    }

    abstract  AProduit{
        getCout():double
    }
    class Produit{
        istrategie : IStrategyCout
        getCout():double
    }

    class Cadeau{
        getCout():double
    }
    Produit -left-|> AProduit
    Cadeau -up-|> Produit


    package Strategie{
        class CoutNormale
        class DixPourcentPoint{
            getPoint():double
        }
        class DixPourcentCout{
            getCout():double
        }
        interface IStrategyCout{
            getCout() : double
        }
        interface IStrategyPoint
        CoutNormale .up.|> IStrategyCout
        DixPourcentPoint .up.|> IStrategyPoint
        DixPourcentCout .up.|> IStrategyCout
    }

    package Observer{
        interface AbonneObserver{
            update(abonne Abonne)
        }

        interface AbonneSubject{
            register(observer AbonneObserver)
            unregister(observer AbonneObserver)
            notifyObservers()

        }

        interface ItemFactureObserver{
            update(itemFacturer ItemFacturer)
        }

        interface ItemFactureSubject {
            register(observer ItemFactureObserver);
            unregister(observer ItemFactureObserver o);
            notifyObservers();
        }



    }

    class ItemFacturer{

    }

    class FactureTableView implements ItemFactureObserver{

    }

    FactureTableView --> "*"ItemFacturer

    class Vente{
        quantite: int
        date : Date
    }

    class Operation{
        type: String
        montant: double
        point: double
    }

    class Database{

    }

    Abonne -up-> "*"CarteInfidelite : possede
    Abonne -up-|> Client : est

    Ville *-- "*" Zone
    Zone *-right- "*" Partenaire
    Partenaire -> "*" AProduit : vend ou offre
    Produit -> IStrategyCout
    Produit -> IStrategyPoint
    CarteInfidelite -up-> "*"Partenaire : "est validée"
    Partenaire --> "*" Vente : effectue
    Abonne --> "*" Operation : effectue
    Vente --> Produit: concerne

}

package Controller{
    class AbonneListController{

    }
    note bottom : "gère la vue qui présente \nla liste des abonnés et la liste\ndes opérations fait par l'abonné"


    class ClientsController{

    }
    note bottom: "gère la vue permettant de \nselectionner l'abonne a qui on \n un ou plusieurs produits"


    class EditSelectedProductQuantityController{

    }
    note top: "gère la vue permettant de \nspecifier le nombre de produit \nchoisi pour un produit lors d'un achat"


    class OffreListController{

    }
    note bottom : "gère la vue permettant de \nlister les cadeaux stockées en \nbase de données"


    class VenteController{

    }
    note top: "gère la vue principal de \nl'application. C'est elle le point d'entrée de l'application"

    VenteController .down.|>AbonneObserver
    EditSelectedProductQuantityController .down.|>ItemFactureSubject
    AbonneListController .down.|>AbonneSubject
    VenteController -down- ClientsController
    VenteController -down- OffreListController
    VenteController -down- AbonneListController
    VenteController -down- EditSelectedProductQuantityController
    VenteController -right- FactureTableView

}
@enduml

@startuml
title cas1
left to right direction

actor client as C
rectangle "cumul de points" {
    usecase "faire achat" as UC1
    usecase "valider carte" as UC2

    UC1 .> UC2 : <<include>>

}

C -- UC1
@enduml

@startuml
title cas2
left to right direction

actor client as C
rectangle "Bonus d'infidelite" {
    usecase "Utiliser carte" as UC1
    usecase "valider carte" as UC2

    UC1 .> UC2 : <<include>>
}

C -- UC1
@enduml

@startuml
title cas3
left to right direction

actor client as C
rectangle "Consulter solde" {
    usecase "consulter solde" as UC1
    usecase "valider carte" as UC2

    UC1 .> UC2 : <<include>>

}

C -- UC1
@enduml



@startuml
title cas4
left to right direction

actor client as C
rectangle "Catalogue des cadeaux" {
    usecase "consulter annuaire" as UC1
    usecase "Consulter description cadeau" as UC2
    usecase "Consulter description magasin" as UC3

    UC2 .> UC1 : <<extends>>
    UC3 .up.> UC1 : <<extends>>

}

C -- UC1
@enduml

@startuml
title cas5
left to right direction

actor client as C
rectangle "Achat cadeau" {
    usecase "demander offre" as UC1
    usecase "acheter offre" as UC2
    usecase "valider carte" as UC3

    UC2 .> UC1 : <<extends>>
    UC2 .down.> UC3 : <<include>>

}

C -- UC1
@enduml

